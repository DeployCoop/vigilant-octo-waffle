metadata:
  name: openproject-${THIS_NAMESPACE}
  namespace: argocd
spec:
  destination:
    namespace: ${THIS_NAMESPACE}
    server: https://kubernetes.default.svc
  project: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - ServerSideApply=false
  source:
    path: openproject
    repoURL: ${THIS_REPO_URL}
    targetRevision: HEAD
    helm:
      values: |
        develop: true
        ingress:
          enabled: true
          ingressClassName: "${THIS_CLUSTER_INGRESS}"
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
            cert-manager.io/cluster-issuer: ${THIS_CLUSTER_ISSUER}
            spec.ingressClassName: ${THIS_CLUSTER_INGRESS}
          host: "${THIS_OPENPROJECT_HOST}.${THIS_DOMAIN}"
          path: /
          pathType: "Prefix"
          tls:
            enabled: true
            secretName: "openproject-ingress-tls"
        persistence:
          enabled: true
          ## Define the volume access modes:
          ## "ReadWriteOnce" => The volume can be mounted as read-write by a single node. ReadWriteOnce access mode still can
          ##                    allow multiple pods to access the volume when the pods are running on the same node.
          ## "ReadOnlyMany" => The volume can be mounted as read-only by many nodes.
          ## "ReadWriteMany" => The volume can be mounted as read-write by many nodes.
          ## "ReadWriteOncePod" => The volume can be mounted as read-write by a single Pod. Use Rea25sdWriteOncePod access mode if
          ##                       you want to ensure that only one pod across whole cluster can read that PVC or write to it.
          accessModes:
            - "ReadWriteOnce"
          annotations: {}
          size: "${THIS_OPENPROJECT_STORAGE_SIZE}"
          storageClassName: "${THIS_STORAGECLASS}"
        postgresql:
          ## When set to true, a postgres server will be deployed into current namespace, when false you have to provide your
          ## own database instance.
          bundled: ${THIS_OPENPROJECT_POSTGRES_BUNDLED}
          global:
            containerSecurityContext:
              enabled: true
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                  - "ALL"
              seccompProfile:
                type: "RuntimeDefault"
              readOnlyRootFilesystem: true
              runAsNonRoot: true
          connection:
            host: "${THIS_NAME}-postgres"
            port: 5432
          auth:
            existingSecret: "${THIS_SECRETS}"
            secretKeys:
              adminPasswordKey: "db-admin-pass"
              userPasswordKey: "op-db-password"
            username: "${THIS_OPENPROJECT_POSTGRES_USER}"
            database: "${THIS_OPENPROJECT_POSTGRES_DB}"
        openproject:
          https: true
          hsts: true
          cache:
            store: "memcache"
          extraEnvVarsSecret: ""
          seed_locale: "en"
          admin_user:
            password_reset: "true"
            name: "OpenProject Admin"
            mail: "${THIS_OPENPROJECT_ADMIN_EMAIL}"
        
            secret: "${THIS_OPENPROJECT_ADMIN_CRED_SECRET}"
        
            ## In case your secret does not use the default key in the secret, you can adjust it here
            secretKeys:
              password: "password"
            # Uncomment if you want to lock the user after creation
            # Relevant for automated deployments that seed LDAP or SSO
            # locked: true
        
          ## Define OpenID Connect providers
          oidc:
            enabled: false
            provider: "Keycloak"
            displayName: "Keycloak"
            host: ""
            identifier: ""
            secret: ""
            authorizationEndpoint: ""
            tokenEndpoint: ""
            userinfoEndpoint: ""
            endSessionEndpoint: ""
            scope: "[openid]"
        
            # Optional attribute mappings from the id token
            attribute_map: {}
        
            ## To avoid having sensitive credentials in your values.yaml, the preferred way is to
            ## use an existing secret containing the OIDC compatible access credentials.
            ## Specify the name of this existing secret here.
            existingSecret:
        
            ## In case your secret does not use the default keys in the secret, you can adjust them here.
            secretKeys:
              identifier: "clientId"
              secret: "clientSecret"
        
            # Allows usage of sealed-secret for `identifier` and `secret` values.
            # Special use case for use in setups where heml template `lookup` function is not available.
            # Ref: https://github.com/argoproj/argo-cd/issues/5202
            #
            extraOidcSealedSecret:
        
          ## Modify PostgreSQL statement timout.
          ## Increase in case you get errors such as "ERROR: canceling statement due to statement timeout".
          ##
          ## Ref.: https://www.openproject.org/docs/installation-and-operations/configuration/environment/#postgresql-statement_timeout
          #
          postgresStatementTimeout: 120s
        
          ## Whether or not to use ephemeral volumes for /app/tmp and /tmp.
          ## Falls back to a sensible default if undefined.
          #
          useTmpVolumes: true
        
          ## Define the tmp storage sizes
          #
          tmpVolumesStorage: "5Gi"
        
          ## Define the class of the tmp storage
          #
          tmpVolumesStorageClassName: "${THIS_STORAGECLASS}"
        
          ## Define custom annotations of tmp storage
          #
          tmpVolumesAnnotations: {}
        
          ## Define custom labels of tmp storage
          #
          tmpVolumesLabels: {}
        
