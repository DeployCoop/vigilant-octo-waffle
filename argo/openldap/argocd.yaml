metadata:
  name: openldap-${THIS_NAMESPACE}
  namespace: argocd
spec:
  destination:
    namespace: ${THIS_NAMESPACE}
    server: https://kubernetes.default.svc
  project: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - ServerSideApply=false
  source:
    path: openldap
    repoURL: ${THIS_REPO_URL}
    targetRevision: HEAD
    helm:
      values: |
        global:
          ldapDomain: "${THIS_DOMAIN}"
          imageRegistry: ""
          adminUser: "${THIS_ADMIN_USER}"
          adminPassword: "${THIS_ADMIN_PASSWD}" 
          configUserEnabled: true
          configUser: "configadmin"
          configPassword: "${THIS_CONFIG_PASSWD}" 
          ldapPort: 389
          sslLdapPort: 636
        clusterDomain: cluster.local
        image:
          # From repository https://hub.docker.com/r/bitnami/openldap/
          #repository: bitnami/openldap
          #tag: 2.6.3
          # Temporary fix
          repository: jpgouin/openldap
          tag: 2.6.8-fix
          pullPolicy: Always
          pullSecrets: []
        replicaCount: 1
        service:
          annotations:
            metallb.universe.tf/address-pool: ldap
          type: ClusterIP
          sessionAffinity: None
        env:
         BITNAMI_DEBUG: "true"
         LDAP_LOGLEVEL: "256"
         LDAP_TLS_ENFORCE: "false"
         LDAPTLS_REQCERT: "never"
         LDAP_ENABLE_TLS: "yes"
         LDAP_SKIP_DEFAULT_TREE: "no"
         LDAP_ORGANISATION: "${THIS_NAME} ${THIS_TLD}"
           #LDAP_EXTRA_SCHEMAS: "cosine,dyngroup,inetorgperson,nis"
         # LDAP_CUSTOM_SCHEMA_DIR: "/opt/bitnami/openldap/etc/schema"
        pdb:
          enabled: false
          minAvailable: 1
          maxUnavailable: ""
        customSchemaFiles:
          00-modules.ldif: |-
            dn: cn=module,cn=config
            cn: module 
            objectClass: olcModuleList
            olcModulePath: /opt/bitnami/openldap/lib/openldap
            olcModuleLoad: dynlist
            olcModuleLoad: argon2
          01-dynlist.ldif: |-
            dn: olcOverlay=dynlist,olcDatabase={2}mdb,cn=config
            objectClass: olcOverlayConfig
            objectClass: olcDynListConfig
            olcOverlay: dynlist
            olcDynListAttrSet: groupOfURLs memberURL member+memberOf@groupOfNames
          02-ldappublickey.ldif: |-
            dn: cn=ldapPublicKey,cn=schema,cn=config
            objectClass: olcSchemaConfig
            cn: openssh-lpk-openldap
            olcAttributeTypes: ( 1.3.6.1.4.1.24552.500.1.1.1.13 NAME 'sshPublicKey' DES
             C 'MANDATORY: OpenSSH Public key' EQUALITY octetStringMatch SYNTAX 1.3.6.1.4.
             1.1466.115.121.1.40 )
            olcObjectClasses: ( 1.3.6.1.4.1.24552.500.1.1.2.0 NAME 'ldapPublicKey' DESC
              'MANDATORY: OpenSSH LPK objectclass' SUP top AUXILIARY MUST ( sshPublicKey $
              uid ) )
        customLdifFiles:
          00-root.ldif: |-
            # Root creation
            dn: dc=${THIS_NAME},dc=${THIS_TLD}
            objectClass: dcObject
            objectClass: organization
            o: ${THIS_NAME}
          01-default-group.ldif: |-
            dn: cn=myGroup,dc=${THIS_NAME},dc=${THIS_TLD}
            cn: myGroup
            gidnumber: 500
            objectclass: posixGroup
            objectclass: top
          03-default-users.ldif: |-
            dn: ou=users,dc=${THIS_NAME},dc=${THIS_TLD}
            objectClass: organizationalUnit
            ou: users
          04-default-readers.ldif: |-
            dn: cn=readers,ou=users,dc=${THIS_NAME},dc=${THIS_TLD}
            cn: readers
            objectClass: groupOfNames
            member: cn=Jean Dupond,dc=${THIS_NAME},dc=${THIS_TLD}
        persistence:
          enabled: true
          accessModes:
            - ReadWriteOnce
          size: 8Gi
          storageClass:  "${THIS_STORAGECLASS}"
        serviceAccount:
          create: true
          name: ""
        volumePermissions:
          enabled: false
        ltb-passwd:
          enabled : true
          image:
            tag: 5.2.3
          ingress:
            enabled: true
            annotations:
              spec.ingressClassName: ${THIS_CLUSTER_INGRESS}
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
              nginx.ingress.kubernetes.io/rewrite-target: /
              cert-manager.io/cluster-issuer: ${THIS_CLUSTER_ISSUER}
            ingressClassName: ${THIS_CLUSTER_INGRESS}
            path: /
            pathType: Prefix
            hosts:
            - "${THIS_LTB_HOST}.${THIS_DOMAIN}"
            tls: 
              - secretName: ${THIS_LTB_HOST}.${THIS_DOMAIN}
                hosts:
                - ${THIS_LTB_HOST}.${THIS_DOMAIN}
        phpldapadmin:
          enabled: true
          image:
            tag: 0.9.0
          env:
            PHPLDAPADMIN_LDAP_CLIENT_TLS_REQCERT: "never"
          ingress:
            enabled: true
            annotations:
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
              nginx.ingress.kubernetes.io/rewrite-target: /
              cert-manager.io/cluster-issuer: ${THIS_CLUSTER_ISSUER}
            ingressClassName: ${THIS_CLUSTER_INGRESS}
            path: /
            pathType: Prefix
            hosts:
            - ${THIS_PHPLDAPADMIN_HOST}.${THIS_DOMAIN}
            tls:
              - secretName: ${THIS_PHPLDAPADMIN_HOST}.${THIS_DOMAIN}
                hosts:
                - ${THIS_PHPLDAPADMIN_HOST}.${THIS_DOMAIN}
