metadata:
  name: fossbilling-${THIS_NAMESPACE}
  namespace: argocd
spec:
  destination:
    namespace: ${THIS_NAMESPACE}
    server: https://kubernetes.default.svc
  project: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - ServerSideApply=false
  source:
    path: FOSSBilling
    repoURL: ${THIS_REPO_URL}
    targetRevision: HEAD
    helm:
      values: |
        # fossbilling configuration
        fossbilling:
          # key: fossbilling.repository
          repository:
            # key: fossbilling.repository.image
            image: fossbilling/fossbilling
            # key: fossbilling.repository.tag
            tag: latest
          # key: fossbilling.persistence
          persistence:
            # key: fossbilling.persistence.fossbilling
            fossbilling:
              # Storage class to use for PVCs
              # storageClass: "-" means use default
              # storageClass: "" means do not specify
              # storageClass: "foo" means use that storageClass
              # key: fossbilling.persistence.fossbilling.storageClass
              storageClass: "${THIS_STORAGECLASS}"
              # key: fossbilling.persistence.fossbilling.size
              size: 1Gi
              # key: fossbilling.persistence.fossbilling.accessMode
              accessMode:
                - ReadWriteOnce
              # key: fossbilling.persistence.fossbilling.enabled
              enabled: "${THIS_FOSSBILLING_PERSISTENCE_ENABLED}"
          # key: fossbilling.replicas
          replicas: 1
          # key: fossbilling.nodeSelector
          nodeSelector: {}
          # Resources allows you to specify the resource requests and limits for a service.
          # Resources are used to specify the amount of CPU and memory that 
          # a container needs.
          #
          # e.g.
          # resources:
          #   requests:
          #     memory: "64Mi"
          #     cpu: "250m"
          #   limits:
          #     memory: "128Mi"
          #     cpu: "500m"
          # key: fossbilling.resources
          resources: {}
          # imagePullPolicy allows you to specify a policy to cache or always pull an image.
          # You must provide a string value with one of the following values:
          # - Always       -> will always pull the image
          # - Never        -> will never pull the image, the image should be present on the node
          # - IfNotPresent -> will pull the image only if it is not present on the node
          # key: fossbilling.imagePullPolicy
          imagePullPolicy: IfNotPresent
          # key: fossbilling.serviceAccount
          serviceAccount: ""
        
        # mysql configuration
        mysql:
          # key: mysql.repository
          repository:
            # key: mysql.repository.image
            image: mysql
            # key: mysql.repository.tag
            tag: "8.2"
          # key: mysql.persistence
          persistence:
            # key: mysql.persistence.mysql
            mysql:
              # Storage class to use for PVCs
              # storageClass: "-" means use default
              # storageClass: "" means do not specify
              # storageClass: "foo" means use that storageClass
              # key: mysql.persistence.mysql.storageClass
              storageClass: "${THIS_STORAGECLASS}"
              # key: mysql.persistence.mysql.size
              size: 1Gi
              # key: mysql.persistence.mysql.accessMode
              accessMode:
                - ReadWriteOnce
              # key: mysql.persistence.mysql.enabled
              enabled: true
          # key: mysql.replicas
          replicas: 1
          # key: mysql.nodeSelector
          nodeSelector: {}
          # Resources allows you to specify the resource requests and limits for a service.
          # Resources are used to specify the amount of CPU and memory that 
          # a container needs.
          #
          # e.g.
          # resources:
          #   requests:
          #     memory: "64Mi"
          #     cpu: "250m"
          #   limits:
          #     memory: "128Mi"
          #     cpu: "500m"
          # key: mysql.resources
          resources: {}
          # imagePullPolicy allows you to specify a policy to cache or always pull an image.
          # You must provide a string value with one of the following values:
          # - Always       -> will always pull the image
          # - Never        -> will never pull the image, the image should be present on the node
          # - IfNotPresent -> will pull the image only if it is not present on the node
          # key: mysql.imagePullPolicy
          imagePullPolicy: IfNotPresent
          # key: mysql.serviceAccount
          serviceAccount: ""
        
        # imagePullSecrets allows you to specify a name of an image pull secret.
        # You must provide a list of object with the name field set to the name of the
        # e.g.
        # pullSecrets:
        # - name: regcred
        # You are, for now, responsible for creating the secret.
        pullSecrets: []
        
# vim: ft=yaml
