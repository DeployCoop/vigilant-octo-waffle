metadata:
  name: supabase-${THIS_NAMESPACE}
  namespace: argocd
spec:
  destination:
    namespace: ${THIS_NAMESPACE}
    server: https://kubernetes.default.svc
  project: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - ServerSideApply=false
  source:
    path: supabase
    repoURL: ${THIS_REPO_URL}
    targetRevision: HEAD
    helm:
      values: |
        secret:
          jwt:
            anonKey:  ${THIS_SUPA_ANON_KEY}
            serviceKey: ${THIS_SUPA_SERVICEKEY}
            secret: ${THIS_SUPA_SECRET}
          smtp:
            username: ${THIS_SUPA_SMTP_USERNAME}
            password: ${THIS_SUPA_SMTP_PASSWORD}
          dashboard:
            username: ${THIS_SUPA_DASHBOARD_USERNAME}
            password: ${THIS_SUPA_DASHBOARD_PASSWORD}
          db:
            username: ${THIS_SUPA_DB_USERNAME}
            password: ${THIS_SUPA_DB_PASSWORD}
            database: ${THIS_SUPA_DB_DATABASE}
          analytics:
            apiKey: ${THIS_SUPA_ANALYTICS_APIKEY}
        
        db:
          enabled: true
          image:
            tag: 15.1.0.147
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 3
          persistence:
            enabled: true
            storageClassName:  "${THIS_STORAGECLASS}"
            annotations: {}
            size: 8Gi
            accessModes:
              - ReadWriteOnce
            class: ""
        
        studio:
          image:
            tag: 20240326-5e5586d
          environment:
            STUDIO_DEFAULT_ORGANIZATION: "${THIS_SUPA_STUDIO_DEFAULT_ORGANIZATION}"
            STUDIO_DEFAULT_PROJECT: "${THIS_SUPA_STUDIO_DEFAULT_PROJECT}"
            SUPABASE_PUBLIC_URL: "${THIS_SUPA_SUPABASE_PUBLIC_URL}"
            NEXT_PUBLIC_ENABLE_LOGS: "true"
          livenessProbe:
            httpGet:
              path: /api/profile
              port: 3000
            initialDelaySeconds: 3
        
        auth:
          image:
            tag: v2.143.0
          environment:
            API_EXTERNAL_URL: "${THIS_SUPA_API_EXTERNAL_URL}"
            GOTRUE_SITE_URL: "${THIS_SUPA_GOTRUE_SITE_URL}"
            GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
            GOTRUE_MAILER_AUTOCONFIRM: "true"
            GOTRUE_SMTP_ADMIN_EMAIL: "${THIS_SUPA_GOTRUE_SMTP_ADMIN_EMAIL}"
            GOTRUE_SMTP_HOST: "${THIS_SUPA_GOTRUE_SMTP_HOST}"
            GOTRUE_SMTP_PORT: "${THIS_SUPA_GOTRUE_SMTP_PORT}"
            GOTRUE_SMTP_SENDER_NAME: "${THIS_SUPA_GOTRUE_SMTP_SENDER_NAME}"
        
        rest:
          image:
            tag: v12.0.1
        
        realtime:
          image:
            tag: v2.27.5
          livenessProbe:
            httpGet:
              path: /
              port: 4000
            initialDelaySeconds: 3
        
        meta:
          image:
            tag: v0.80.0
        
        storage:
          image:
            tag: v0.46.4
          livenessProbe:
            httpGet:
              path: /status
              port: 5000
            initialDelaySeconds: 3
          persistence:
            enabled: true
            storageClassName:  "${THIS_STORAGECLASS}"
            annotations: {}
            size: 8Gi
            accessModes:
              - ReadWriteOnce
            class: ""
        
        imgproxy:
          image:
            tag: v3.8.0
          environment:
            IMGPROXY_ENABLE_WEBP_DETECTION: "true"
          livenessProbe:
            exec:
              command:
                - imgproxy
                - health
            initialDelaySeconds: 3
          persistence:
            enabled: true
            storageClassName:  "${THIS_STORAGECLASS}"
            annotations: {}
            size: 8Gi
            accessModes:
              - ReadWriteOnce
            class: ""
        
        kong:
          image:
            repository: kong
            tag: 2.8.1
          environment:
            KONG_DECLARATIVE_CONFIG: /usr/local/kong/kong.yml
            KONG_LOG_LEVEL: info
          ingress:
            enabled: true
            className: ${THIS_CLUSTER_INGRESS}
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
              traefik.ingress.kubernetes.io/router.middlewares: tekromancy-mw-stripper@kubernetescrd
              cert-manager.io/cluster-issuer: ${THIS_CLUSTER_ISSUER}
              spec.ingressClassName: ${THIS_CLUSTER_INGRESS}
            tls:
              - secretName: supatekro-ingress-tls
                hosts:
                  - ${THIS_SUPA_HOST}.${THIS_DOMAIN}
            hosts:
              - host: ${THIS_SUPA_HOST}.${THIS_DOMAIN}
                paths:
                  - path: /
                    pathType: Prefix
        
        analytics:
          image:
            tag: 1.4.0
          livenessProbe:
            httpGet:
              path: /health
              port: 4000
            initialDelaySeconds: 3
        
        vector:
          image:
            tag: 0.34.0-alpine
          livenessProbe:
            httpGet:
              path: /health
              port: 9001
            initialDelaySeconds: 3
          ## Vector requires logs from the control plane to function.
          ## This is normally stored in /var/log/pods
          ## Modify these values according to your environment.
          volumeMounts:
            - name: pod-logs
              mountPath: /var/log/pods
          volumes:
            - name: pod-logs
              hostPath:
                path: /var/log/pods
        
        functions:
          image:
            tag: v1.41.2
